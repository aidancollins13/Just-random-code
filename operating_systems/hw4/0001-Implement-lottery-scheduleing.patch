From 909d3bd378a6a60bd10207e070aa8cbd89882316 Mon Sep 17 00:00:00 2001
From: Aidan Collins <ac5152@nyu.edu>
Date: Wed, 26 Oct 2016 14:01:02 -0400
Subject: [PATCH] Implement lottery scheduleing

---
 Makefile    |  1 +
 hackbench.c |  2 +-
 proc.c      | 28 ++++++++++++++++++++++++++--
 proc.h      |  1 +
 syscall.c   |  2 ++
 syscall.h   |  1 +
 sysproc.c   | 11 +++++++++++
 user.h      |  1 +
 usys.S      |  1 +
 9 files changed, 45 insertions(+), 3 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..980f57c 100644
--- a/Makefile
+++ b/Makefile
@@ -165,6 +165,7 @@ UPROGS=\
 	_init\
 	_kill\
 	_ln\
+	_lotterytest\
 	_ls\
 	_mkdir\
 	_rm\
diff --git a/hackbench.c b/hackbench.c
index e33452a..8e9b8e4 100644
--- a/hackbench.c
+++ b/hackbench.c
@@ -75,7 +75,7 @@ static void fdpair(int fds[2])
     //    pipe(fds[0], fds[1]);
     if (pipe(fds) == 0)
       fd_count += 2;
-      return;
+    return;
   } else {
     // This mode would not run correctly in xv6
     //if (socketpair(AF_UNIX, SOCK_STREAM, 0, fds) == 0)
diff --git a/proc.c b/proc.c
index b122e3b..bb98d8f 100644
--- a/proc.c
+++ b/proc.c
@@ -72,6 +72,7 @@ found:
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
+  p->tickets = 10;
 
   return p;
 }
@@ -83,7 +84,6 @@ userinit(void)
 {
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
-  
   p = allocproc();
   initproc = p;
   if((p->pgdir = setupkvm()) == 0)
@@ -280,7 +280,31 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    int counter = 0, total_tickets = 0;
+    
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        if(p->state==RUNNABLE)
+            total_tickets = total_tickets + p->tickets;
+    }
+    int winner = random_at_most(total_tickets);
+    p = ptable.proc;
+    for(; p < &ptable.proc[NPROC]; p++){
+      counter = counter + p->tickets;
+    if(p->state != RUNNABLE)
+        continue;
+      if(counter < winner)
+        continue;
+      foundproc = 1;
+      proc = p;
+      switchuvm(p);
+      p->state = RUNNING;
+      swtch(&cpu->scheduler, proc->context);
+      switchkvm();
+      proc = 0;
+      p = ptable.proc;
+    }
+    
+    /*for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
@@ -298,6 +322,7 @@ scheduler(void)
       // It should have changed its p->state before coming back.
       proc = 0;
     }
+    */
     release(&ptable.lock);
 
   }
@@ -353,7 +378,6 @@ forkret(void)
   
   // Return to "caller", actually trapret (see allocproc).
 }
-
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
 void
diff --git a/proc.h b/proc.h
index 3b9c3ac..3d41831 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;                // Amount of tickets a given process has
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..093c013 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "rand.h"
 
 int
 sys_fork(void)
@@ -98,3 +99,13 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int
+sys_settickets(void)
+{
+  int ticketn;
+  if(argint(0, &ticketn) < 0)
+	return -1;
+  proc->tickets = ticketn;
+  return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
2.10.1

